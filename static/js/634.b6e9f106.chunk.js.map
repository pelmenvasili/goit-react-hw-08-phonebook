{"version":3,"file":"static/js/634.b6e9f106.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"ContactForm_input__Bl93P\",\"label\":\"ContactForm_label__-cVXI\",\"addContactBtn\":\"ContactForm_addContactBtn__3KI6e\",\"form\":\"ContactForm_form__dhl+T\"};","export const selectFilter = state => state.contacts.filter;\nconsole.log(selectFilter)\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectItems = state => state.contacts.items;\nexport const selectSortedContacts = (state) => {\n  const filter = selectFilter(state);\n  console.log(filter);\n  return  selectItems(state)\n    .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n    .sort((a, b) => a.name.localeCompare(b.name));\n};","import { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { selectItems } from '../../redux/contacts/contacts-selectors';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectItems);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNumber(event.target.value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    const resetValue = () => {\n      setName('');\n      setNumber('');\n    };\n\n    const existingContact = contacts.find(\n      contact => contact.name === name || contact.number === number\n    );\n    if (existingContact) {\n      alert('Contact with the same name or number already exists.');\n      resetValue();\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    resetValue();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleFormSubmit} className={css.form}>\n        <label className={css.label}>\n          Name\n          <input\n            className={css.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleNameChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label className={css.label}>\n          Number\n          <input\n            className={css.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleNumberChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={css.addContactBtn}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactListItem_contact__gtH4X\",\"contactName\":\"ContactListItem_contactName__kCRjB\",\"deleteButton\":\"ContactListItem_deleteButton__b1Nqt\"};","import PropTypes from 'prop-types';\nimport css from './ContactListItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\n\nconst ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = () => dispatch(deleteContact(id));\n\n  return (\n    <li key={id} className={css.contact}>\n      <span className={css.contactName}>{name}:</span> {number}\n      <button\n        type=\"button\"\n        onClick={handleDeleteContact}\n        className={css.deleteButton}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"text\":\"ContactList_text__+NWAW\"};","import ContactListItem from 'components/ContactListItem/ContactListItem';\nimport css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectSortedContacts } from '../../redux/contacts/contacts-selectors';\n\nconst ContactList = () => {\nconst filteredContacts = useSelector(state => selectSortedContacts(state));\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.length !== 0 ? (\n        filteredContacts.map(({ id, name, number, phone }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number || phone}\n            id={id}\n          />\n        ))\n      ) : (\n        <p className={css.text}>No contact found with that name</p>\n      )}\n    </ul>\n  );\n};\n\nexport default ContactList;","import css from '../ContactForm/ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from '../../redux/contacts/contacts-slice';\nimport { selectFilter } from '../../redux/contacts/contacts-selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleFilterChange = event => {\n    dispatch(updateFilter(event.target.value));\n  };\n\n  return (\n    <label className={css.label}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={handleFilterChange}\n        className={css.input}\n      />\n    </label>\n  );\n};\n\nexport default Filter;","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport authSelectors from '../redux/auth/auth-selectors';\n\nconst ContactsView = () => {\n  const navigate = useNavigate();\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n\n  useEffect(() => {\n  const isLoggedIn = localStorage.getItem('isLoggedIn');\n  if (!isLoggedIn) {\n    navigate('/login');\n  }\n}, [navigate]);\n\n  if (!isLoggedIn) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsView;"],"names":["selectFilter","state","contacts","filter","console","log","selectItems","items","useSelector","dispatch","useDispatch","useState","name","setName","number","setNumber","onSubmit","event","preventDefault","resetValue","find","contact","alert","addContact","className","css","type","value","onChange","target","pattern","title","required","id","onClick","deleteContact","filteredContacts","toLowerCase","includes","sort","a","b","localeCompare","selectSortedContacts","length","map","phone","updateFilter","navigate","useNavigate","isLoggedIn","authSelectors","useEffect","localStorage","getItem","to","replace"],"sourceRoot":""}